---
layout: post
title:  "尝试理解红黑树"
date:   2023-04-16 14:19:41 +0800
categories: 算法 红黑树
---


**二叉查找树**: 如果当前结点为x,x的左子树的所有有结点都比x的值小，x的右子树的所有节点都比x的值大, 如下图这样<br>

<img src="https://raw.githubusercontent.com/for-will/for-will.github.io/main/_img/rbt_2.svg">


**一个糟糕二叉查找树**: 但也有可能是下图这样的，这和一个链表没什么区别了<br>

<img src="../_img/rbt_1.svg">

红黑树的目的就是实现一个自平衡的二叉查找树

### 红黑树的特征
(1) 每个节点或者是黑色，或者是红色。<br>
(2) 根节点是黑色。<br>
(3) 每个叶子节点是黑色。 [注意：这里叶子节点，是指为空的叶子节点！]<br>
(4) 如果一个节点是红色的，则它的子节点必须是黑色的。<br>
(5) 从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。<br>


### 插入新的节点`x`后

新插入的节点都标记为红色，插入后，如果`x`结点的父节点`p`是黑色，那么新的树依然满足红黑树的5个特征，如果父节点`p`是红色,则不满足特征`(4) 如果一个节点是红色的，则它的子节点必须是黑色的`（p是红色的，p的子节点x也是红色的）,需要做相应的调整

怎么调整呢？分情况：

#### 1. x的父节点p是红色，p的兄弟节点p2也是红色

<img src="../_img/rbt_3.svg">

这种情况最简单，只需要`p.color=black;p2.color=black;pp.color=red`。将父节点和父节点的兄弟节点改成黑色，祖父节点改为红色。修改之后：

<img src="../_img/rbt_4.svg">

**为什么这样可以？**：x和p不能都为红色，那就把其中一个改成黑色。改谁呢？

**将p改成黑色**:p改成黑色后，p子树叶子节点到root路径上的黑色节点将比别的路径多1个，把pp改成红色减少一个黑色节点就好了。这时候p2路径上的黑色节点数又少了一个，没关系，p2之前是红色，把它变成黑色就平衡了

**隐含的规则**：<1> 因为`(4) 如果一个节点是红色的，则它的子节点必须是黑色的`，所以红色节点p的父节点pp一定是黑色；<2> 如果p到其任一叶子节点路径上的黑色节点数都为a，p2到其任一叶子节点路径上的黑色节点数都为b，且a等于b，则pp到其任一叶子节点路径上的黑色节点数量也会相等，pp为红色总数就是a，pp为黑色就是a+1。

**为什么不改x?**:如果把x改成黑色，则x到root路径上的黑色节总数比别的叶子节点到root路径上的黑色节点总数多1个，不满足特征`(5) 从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。`

**之后的问题：**pp由黑色变成了红色，pp的父节点也有可能是红色，这不满足特征（4），所以还需要处理pp节点